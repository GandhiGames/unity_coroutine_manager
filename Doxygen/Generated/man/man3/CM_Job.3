.TH "CM_Job" 3 "Mon Jan 4 2016" "Version 1.0" "Coroutine Manager Pro" \" -*- nroff -*-
.ad l
.nh
.SH NAME
CM_Job \- The main coroutine job class\&. Encapsulates the behaviour for a single coroutine job\&. Provides access to status (i\&.e\&. running, paused, killed etc),  

.SH SYNOPSIS
.br
.PP
.PP
Inherits \fBICM_Cloneable< CM_Job >\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBCM_Job\fP \fBClone\fP ()"
.br
.RI "\fIClone this instance\&. \fP"
.ti -1c
.RI "\fBCM_Job\fP[] \fBClone\fP (int numOfCopies)"
.br
.RI "\fIClone this instance\&. \fP"
.ti -1c
.RI "\fBCM_Job\fP \fBStart\fP ()"
.br
.RI "\fIStart this instance\&. Runs the coroutine immediately\&. \fP"
.ti -1c
.RI "\fBCM_Job\fP \fBStart\fP (float delayInSeconds)"
.br
.RI "\fIStart the specified instance after delayInSeconds\&. The coroutine is added to \fBCM_Dispatcher\fP job queue to be executed in the next timestep as a coroutine cannot be started in a seperate thread\&. \fP"
.ti -1c
.RI "\fBCM_Job\fP \fBRepeat\fP ()"
.br
.RI "\fISets this instance to repeat\&. The job is repeated when it has finished processing\&. \fP"
.ti -1c
.RI "\fBCM_Job\fP \fBRepeat\fP (int numOfTimes)"
.br
.RI "\fISets this instance to repeat\&. The job is repeated a set number of times\&. \fP"
.ti -1c
.RI "\fBCM_Job\fP \fBStopRepeat\fP ()"
.br
.ti -1c
.RI "\fBCM_Job\fP \fBStopRepeat\fP (float delayInSeconds)"
.br
.RI "\fIStops the repeat after a specified delay in seconds\&. \fP"
.ti -1c
.RI "\fBCM_Job\fP \fBPause\fP ()"
.br
.RI "\fIPause this instance\&. \fP"
.ti -1c
.RI "\fBCM_Job\fP \fBPause\fP (float delayInSeconds)"
.br
.RI "\fIPause the specified instance after delayInSeconds\&. \fP"
.ti -1c
.RI "\fBCM_Job\fP \fBResume\fP ()"
.br
.RI "\fIResume this instance\&. \fP"
.ti -1c
.RI "\fBCM_Job\fP \fBResume\fP (float delayInSeconds)"
.br
.RI "\fIResume the specified instance after delayInSeconds\&. \fP"
.ti -1c
.RI "void \fBKill\fP ()"
.br
.RI "\fIKill this instance\&. Stops the running coroutine\&. \fP"
.ti -1c
.RI "void \fBKill\fP (float delayInSeconds)"
.br
.RI "\fIKill this instance\&. Stops the running coroutine after delayInSeconds\&. \fP"
.ti -1c
.RI "\fBCM_Job\fP \fBAddChild\fP (\fBCM_Job\fP childJob)"
.br
.RI "\fIAdds a child job\&. \fP"
.ti -1c
.RI "\fBCM_Job\fP \fBAddChild\fP (IEnumerator childJob)"
.br
.RI "\fICreate a new job using the provided Enumerator and adds as a child job\&. \fP"
.ti -1c
.RI "\fBCM_Job\fP \fBRemoveChildJob\fP (\fBCM_Job\fP childJob)"
.br
.RI "\fIRemoves a child job if present\&. \fP"
.ti -1c
.RI "\fBCM_Job\fP \fBNotifyOnJobFinishedRunning\fP (EventHandler< \fBCM_JobEventArgs\fP > e)"
.br
.RI "\fISubscribes to the jobFinishedRunning event \fP"
.ti -1c
.RI "\fBCM_Job\fP \fBRemoveNotifyOnJobFinishedRunning\fP (EventHandler< \fBCM_JobEventArgs\fP > e)"
.br
.RI "\fIUnsubscribes to the jobFinishedRunning event \fP"
.ti -1c
.RI "\fBCM_Job\fP \fBNotifyOnJobStarted\fP (EventHandler< \fBCM_JobEventArgs\fP > e)"
.br
.RI "\fISubscribes to the jobStarted event\&. \fP"
.ti -1c
.RI "\fBCM_Job\fP \fBRemoveNotifyOnJobStarted\fP (EventHandler< \fBCM_JobEventArgs\fP > e)"
.br
.RI "\fIUnsubscribes to the jobStarted event\&. \fP"
.ti -1c
.RI "\fBCM_Job\fP \fBNotifyOnJobPaused\fP (EventHandler< \fBCM_JobEventArgs\fP > e)"
.br
.RI "\fISubscribes to the job paused event\&. \fP"
.ti -1c
.RI "\fBCM_Job\fP \fBRemoveNotifyOnJobPaused\fP (EventHandler< \fBCM_JobEventArgs\fP > e)"
.br
.RI "\fIUnsubscribes to the job paused event\&. \fP"
.ti -1c
.RI "\fBCM_Job\fP \fBNotifyOnJobResumed\fP (EventHandler< \fBCM_JobEventArgs\fP > e)"
.br
.RI "\fISubscribes to the job resumed event\&. \fP"
.ti -1c
.RI "\fBCM_Job\fP \fBRemoveNotifyOnJobResumed\fP (EventHandler< \fBCM_JobEventArgs\fP > e)"
.br
.RI "\fIUnsubscribes to the job resumed event\&. \fP"
.ti -1c
.RI "\fBCM_Job\fP \fBNotifyOnJobComplete\fP (EventHandler< \fBCM_JobEventArgs\fP > e)"
.br
.RI "\fISubscribes to the the jobComplete event\&. \fP"
.ti -1c
.RI "\fBCM_Job\fP \fBRemoveNotifyOnJobComplete\fP (EventHandler< \fBCM_JobEventArgs\fP > e)"
.br
.RI "\fIUnsubscribes to the the jobComplete event\&. \fP"
.ti -1c
.RI "\fBCM_Job\fP \fBNotifyOnChildJobStarted\fP (EventHandler< \fBCM_JobEventArgs\fP > e)"
.br
.RI "\fISubscribes to the the childJobsStarted event\&. \fP"
.ti -1c
.RI "\fBCM_Job\fP \fBRemoveNotifyOnChildJobStarted\fP (EventHandler< \fBCM_JobEventArgs\fP > e)"
.br
.RI "\fIUnsubscribes to the the childJobsStarted event\&. \fP"
.ti -1c
.RI "\fBCM_Job\fP \fBNotifyOnChildJobComplete\fP (EventHandler< \fBCM_JobEventArgs\fP > e)"
.br
.RI "\fISubscribes to the the childJobsComplete event\&. \fP"
.ti -1c
.RI "\fBCM_Job\fP \fBRemoveNotifyOnChildJobComplete\fP (EventHandler< \fBCM_JobEventArgs\fP > e)"
.br
.RI "\fIUnsubscribes to the the childJobsComplete event\&. \fP"
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static \fBCM_Job\fP \fBMake\fP (IEnumerator \fBcoroutine\fP)"
.br
.RI "\fIReturns an initialised \fBCM_Job\fP instance\&. Provides static access to class\&. \fP"
.ti -1c
.RI "static \fBCM_Job\fP \fBMake\fP (IEnumerator \fBcoroutine\fP, string \fBid\fP)"
.br
.RI "\fIReturns an initialised \fBCM_Job\fP instance with the specified id\&. Provides static access to class\&. \fP"
.ti -1c
.RI "static \fBCM_Job\fP[] \fBBuilder\fP (params IEnumerator[] coroutines)"
.br
.RI "\fIBuilds the specified coroutines into \fBCM_Job\fP instances\&. \fP"
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "void \fBOnJobFinishedRunning\fP (\fBCM_JobEventArgs\fP e)"
.br
.RI "\fIRaises the job finished running event\&. \fP"
.ti -1c
.RI "void \fBOnJobStarted\fP (\fBCM_JobEventArgs\fP e)"
.br
.RI "\fIRaises the job started event\&. \fP"
.ti -1c
.RI "void \fBOnJobComplete\fP (\fBCM_JobEventArgs\fP e)"
.br
.RI "\fIRaises the job complete event\&. \fP"
.ti -1c
.RI "void \fBOnJobPaused\fP (\fBCM_JobEventArgs\fP e)"
.br
.RI "\fIRaises the job paused event\&. \fP"
.ti -1c
.RI "void \fBOnJobResumed\fP (\fBCM_JobEventArgs\fP e)"
.br
.RI "\fIRaises the job resumed event\&. \fP"
.ti -1c
.RI "void \fBOnChildJobsStarted\fP (\fBCM_JobEventArgs\fP e)"
.br
.RI "\fIRaises the child jobs started event\&. \fP"
.ti -1c
.RI "void \fBOnChildJobsComplete\fP (\fBCM_JobEventArgs\fP e)"
.br
.RI "\fIRaises the child jobs complete event\&. \fP"
.in -1c
.SS "Properties"

.in +1c
.ti -1c
.RI "string \fBid\fP\fC [get, set]\fP"
.br
.RI "\fIGets or sets the identifier\&. The identifier is a unique key used by \fBCM_JobManager\fP to reference individual jobs\&. \fP"
.ti -1c
.RI "bool \fBrunning\fP\fC [get]\fP"
.br
.RI "\fIGets a value indicating whether this \fBCM_Job\fP is running\&. \fP"
.ti -1c
.RI "bool \fBpaused\fP\fC [get]\fP"
.br
.RI "\fIGets a value indicating whether this \fBCM_Job\fP is paused\&. \fP"
.ti -1c
.RI "bool \fBjobKilled\fP\fC [get]\fP"
.br
.RI "\fIGets a value indicating whether this \fBCM_Job\fP job was killed or was allowed to complete\&. \fP"
.ti -1c
.RI "bool \fBrepeating\fP\fC [get]\fP"
.br
.RI "\fIGets a value indicating whether this \fBCM_Job\fP is repeating\&. \fP"
.ti -1c
.RI "int \fBnumOfTimesExecuted\fP\fC [get]\fP"
.br
.RI "\fIGets the number of times this job has been executed\&. \fP"
.ti -1c
.RI "IEnumerator \fBcoroutine\fP\fC [get]\fP"
.br
.RI "\fIGets the coroutine of this job\&. \fP"
.in -1c
.SH "Detailed Description"
.PP 
The main coroutine job class\&. Encapsulates the behaviour for a single coroutine job\&. Provides access to status (i\&.e\&. running, paused, killed etc), 


.SH "Member Function Documentation"
.PP 
.SS "\fBCM_Job\fP CM_Job\&.AddChild (\fBCM_Job\fP childJob)"

.PP
Adds a child job\&. 
.PP
\fBReturns:\fP
.RS 4
The child\&.
.RE
.PP
\fBParameters:\fP
.RS 4
\fIchildJob\fP Child job\&.
.RE
.PP

.SS "\fBCM_Job\fP CM_Job\&.AddChild (IEnumerator childJob)"

.PP
Create a new job using the provided Enumerator and adds as a child job\&. 
.PP
\fBReturns:\fP
.RS 4
The child\&.
.RE
.PP
\fBParameters:\fP
.RS 4
\fIchildJob\fP Child job\&.
.RE
.PP

.SS "static \fBCM_Job\fP [] CM_Job\&.Builder (params IEnumerator[] coroutines)\fC [static]\fP"

.PP
Builds the specified coroutines into \fBCM_Job\fP instances\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcoroutines\fP The built jobs\&.
.RE
.PP

.SS "\fBCM_Job\fP CM_Job\&.Clone ()"

.PP
Clone this instance\&. 
.SS "\fBCM_Job\fP [] CM_Job\&.Clone (int numOfCopies)"

.PP
Clone this instance\&. 
.PP
\fBParameters:\fP
.RS 4
\fInumOfCopies\fP Number of copies to create\&.
.RE
.PP

.SS "void CM_Job\&.Kill ()"

.PP
Kill this instance\&. Stops the running coroutine\&. 
.SS "void CM_Job\&.Kill (float delayInSeconds)"

.PP
Kill this instance\&. Stops the running coroutine after delayInSeconds\&. 
.PP
\fBParameters:\fP
.RS 4
\fIdelayInSeconds\fP Delay in seconds until instance killed\&.
.RE
.PP

.SS "static \fBCM_Job\fP CM_Job\&.Make (IEnumerator coroutine)\fC [static]\fP"

.PP
Returns an initialised \fBCM_Job\fP instance\&. Provides static access to class\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcoroutine\fP Coroutine\&.
.RE
.PP

.SS "static \fBCM_Job\fP CM_Job\&.Make (IEnumerator coroutine, string id)\fC [static]\fP"

.PP
Returns an initialised \fBCM_Job\fP instance with the specified id\&. Provides static access to class\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcoroutine\fP Coroutine\&.
.br
\fIid\fP Identifier\&.
.RE
.PP

.SS "\fBCM_Job\fP CM_Job\&.NotifyOnChildJobComplete (EventHandler< \fBCM_JobEventArgs\fP > e)"

.PP
Subscribes to the the childJobsComplete event\&. 
.PP
\fBParameters:\fP
.RS 4
\fIe\fP The eventhandler to be invoked on event\&.
.RE
.PP

.SS "\fBCM_Job\fP CM_Job\&.NotifyOnChildJobStarted (EventHandler< \fBCM_JobEventArgs\fP > e)"

.PP
Subscribes to the the childJobsStarted event\&. 
.PP
\fBParameters:\fP
.RS 4
\fIe\fP The eventhandler to be invoked on event\&.
.RE
.PP

.SS "\fBCM_Job\fP CM_Job\&.NotifyOnJobComplete (EventHandler< \fBCM_JobEventArgs\fP > e)"

.PP
Subscribes to the the jobComplete event\&. 
.PP
\fBParameters:\fP
.RS 4
\fIe\fP The eventhandler to be invoked on event\&.
.RE
.PP

.SS "\fBCM_Job\fP CM_Job\&.NotifyOnJobFinishedRunning (EventHandler< \fBCM_JobEventArgs\fP > e)"

.PP
Subscribes to the jobFinishedRunning event 
.PP
\fBParameters:\fP
.RS 4
\fIe\fP The eventhandler to be invoked on event\&.
.RE
.PP

.SS "\fBCM_Job\fP CM_Job\&.NotifyOnJobPaused (EventHandler< \fBCM_JobEventArgs\fP > e)"

.PP
Subscribes to the job paused event\&. 
.PP
\fBReturns:\fP
.RS 4
The on job paused\&.
.RE
.PP
\fBParameters:\fP
.RS 4
\fIe\fP E\&.
.RE
.PP

.SS "\fBCM_Job\fP CM_Job\&.NotifyOnJobResumed (EventHandler< \fBCM_JobEventArgs\fP > e)"

.PP
Subscribes to the job resumed event\&. 
.PP
\fBReturns:\fP
.RS 4
The on job paused\&.
.RE
.PP
\fBParameters:\fP
.RS 4
\fIe\fP E\&.
.RE
.PP

.SS "\fBCM_Job\fP CM_Job\&.NotifyOnJobStarted (EventHandler< \fBCM_JobEventArgs\fP > e)"

.PP
Subscribes to the jobStarted event\&. 
.PP
\fBParameters:\fP
.RS 4
\fIe\fP The eventhandler to be invoked on event\&.
.RE
.PP

.SS "void CM_Job\&.OnChildJobsComplete (\fBCM_JobEventArgs\fP e)\fC [protected]\fP"

.PP
Raises the child jobs complete event\&. 
.PP
\fBParameters:\fP
.RS 4
\fIe\fP E\&.
.RE
.PP

.SS "void CM_Job\&.OnChildJobsStarted (\fBCM_JobEventArgs\fP e)\fC [protected]\fP"

.PP
Raises the child jobs started event\&. 
.PP
\fBParameters:\fP
.RS 4
\fIe\fP E\&.
.RE
.PP

.SS "void CM_Job\&.OnJobComplete (\fBCM_JobEventArgs\fP e)\fC [protected]\fP"

.PP
Raises the job complete event\&. 
.PP
\fBParameters:\fP
.RS 4
\fIe\fP E\&.
.RE
.PP

.SS "void CM_Job\&.OnJobFinishedRunning (\fBCM_JobEventArgs\fP e)\fC [protected]\fP"

.PP
Raises the job finished running event\&. 
.PP
\fBParameters:\fP
.RS 4
\fIe\fP E\&.
.RE
.PP

.SS "void CM_Job\&.OnJobPaused (\fBCM_JobEventArgs\fP e)\fC [protected]\fP"

.PP
Raises the job paused event\&. 
.PP
\fBParameters:\fP
.RS 4
\fIe\fP E\&.
.RE
.PP

.SS "void CM_Job\&.OnJobResumed (\fBCM_JobEventArgs\fP e)\fC [protected]\fP"

.PP
Raises the job resumed event\&. 
.PP
\fBParameters:\fP
.RS 4
\fIe\fP E\&.
.RE
.PP

.SS "void CM_Job\&.OnJobStarted (\fBCM_JobEventArgs\fP e)\fC [protected]\fP"

.PP
Raises the job started event\&. 
.PP
\fBParameters:\fP
.RS 4
\fIe\fP E\&.
.RE
.PP

.SS "\fBCM_Job\fP CM_Job\&.Pause ()"

.PP
Pause this instance\&. 
.SS "\fBCM_Job\fP CM_Job\&.Pause (float delayInSeconds)"

.PP
Pause the specified instance after delayInSeconds\&. 
.PP
\fBParameters:\fP
.RS 4
\fIdelayInSecods\fP Delay in secods until instance is paused\&.
.RE
.PP

.SS "\fBCM_Job\fP CM_Job\&.RemoveChildJob (\fBCM_Job\fP childJob)"

.PP
Removes a child job if present\&. 
.PP
\fBReturns:\fP
.RS 4
The child job\&.
.RE
.PP
\fBParameters:\fP
.RS 4
\fIchildJob\fP Child job\&.
.RE
.PP

.SS "\fBCM_Job\fP CM_Job\&.RemoveNotifyOnChildJobComplete (EventHandler< \fBCM_JobEventArgs\fP > e)"

.PP
Unsubscribes to the the childJobsComplete event\&. 
.PP
\fBParameters:\fP
.RS 4
\fIe\fP The eventhandler to be unsubscribed\&.
.RE
.PP

.SS "\fBCM_Job\fP CM_Job\&.RemoveNotifyOnChildJobStarted (EventHandler< \fBCM_JobEventArgs\fP > e)"

.PP
Unsubscribes to the the childJobsStarted event\&. 
.PP
\fBParameters:\fP
.RS 4
\fIe\fP The eventhandler to be unsubscribed\&.
.RE
.PP

.SS "\fBCM_Job\fP CM_Job\&.RemoveNotifyOnJobComplete (EventHandler< \fBCM_JobEventArgs\fP > e)"

.PP
Unsubscribes to the the jobComplete event\&. 
.PP
\fBParameters:\fP
.RS 4
\fIe\fP The eventhandler to be unsubscribed\&.
.RE
.PP

.SS "\fBCM_Job\fP CM_Job\&.RemoveNotifyOnJobFinishedRunning (EventHandler< \fBCM_JobEventArgs\fP > e)"

.PP
Unsubscribes to the jobFinishedRunning event 
.PP
\fBParameters:\fP
.RS 4
\fIe\fP The eventhandler to be invoked on event\&.
.RE
.PP

.SS "\fBCM_Job\fP CM_Job\&.RemoveNotifyOnJobPaused (EventHandler< \fBCM_JobEventArgs\fP > e)"

.PP
Unsubscribes to the job paused event\&. 
.PP
\fBParameters:\fP
.RS 4
\fIe\fP The eventhandler to be unsubscribed\&.
.RE
.PP

.SS "\fBCM_Job\fP CM_Job\&.RemoveNotifyOnJobResumed (EventHandler< \fBCM_JobEventArgs\fP > e)"

.PP
Unsubscribes to the job resumed event\&. 
.PP
\fBParameters:\fP
.RS 4
\fIe\fP The eventhandler to be unsubscribed\&.
.RE
.PP

.SS "\fBCM_Job\fP CM_Job\&.RemoveNotifyOnJobStarted (EventHandler< \fBCM_JobEventArgs\fP > e)"

.PP
Unsubscribes to the jobStarted event\&. 
.PP
\fBParameters:\fP
.RS 4
\fIe\fP The eventhandler to be unsubscribed\&.
.RE
.PP

.SS "\fBCM_Job\fP CM_Job\&.Repeat ()"

.PP
Sets this instance to repeat\&. The job is repeated when it has finished processing\&. 
.SS "\fBCM_Job\fP CM_Job\&.Repeat (int numOfTimes)"

.PP
Sets this instance to repeat\&. The job is repeated a set number of times\&. 
.SS "\fBCM_Job\fP CM_Job\&.Resume ()"

.PP
Resume this instance\&. 
.SS "\fBCM_Job\fP CM_Job\&.Resume (float delayInSeconds)"

.PP
Resume the specified instance after delayInSeconds\&. 
.PP
\fBParameters:\fP
.RS 4
\fIdelayInSecods\fP Delay in secods until instance is resumed\&.
.RE
.PP

.SS "\fBCM_Job\fP CM_Job\&.Start ()"

.PP
Start this instance\&. Runs the coroutine immediately\&. 
.SS "\fBCM_Job\fP CM_Job\&.Start (float delayInSeconds)"

.PP
Start the specified instance after delayInSeconds\&. The coroutine is added to \fBCM_Dispatcher\fP job queue to be executed in the next timestep as a coroutine cannot be started in a seperate thread\&. 
.PP
\fBParameters:\fP
.RS 4
\fIdelayInSecods\fP Delay in secods until instance is processed\&.
.RE
.PP

.SS "\fBCM_Job\fP CM_Job\&.StopRepeat (float delayInSeconds)"

.PP
Stops the repeat after a specified delay in seconds\&. 
.PP
\fBReturns:\fP
.RS 4
The repeat\&.
.RE
.PP
\fBParameters:\fP
.RS 4
\fIdelayInSeconds\fP Delay in seconds\&.
.RE
.PP

.SH "Property Documentation"
.PP 
.SS "IEnumerator CM_Job\&.coroutine\fC [get]\fP"

.PP
Gets the coroutine of this job\&. The coroutine\&.
.SS "string CM_Job\&.id\fC [get]\fP, \fC [set]\fP"

.PP
Gets or sets the identifier\&. The identifier is a unique key used by \fBCM_JobManager\fP to reference individual jobs\&. The identifier\&.
.SS "bool CM_Job\&.jobKilled\fC [get]\fP"

.PP
Gets a value indicating whether this \fBCM_Job\fP job was killed or was allowed to complete\&. \fCtrue\fP if job killed; otherwise, \fCfalse\fP\&.
.SS "int CM_Job\&.numOfTimesExecuted\fC [get]\fP"

.PP
Gets the number of times this job has been executed\&. The number of times executed\&.
.SS "bool CM_Job\&.paused\fC [get]\fP"

.PP
Gets a value indicating whether this \fBCM_Job\fP is paused\&. \fCtrue\fP if paused; otherwise, \fCfalse\fP\&.
.SS "bool CM_Job\&.repeating\fC [get]\fP"

.PP
Gets a value indicating whether this \fBCM_Job\fP is repeating\&. \fCtrue\fP if repeating; otherwise, \fCfalse\fP\&.
.SS "bool CM_Job\&.running\fC [get]\fP"

.PP
Gets a value indicating whether this \fBCM_Job\fP is running\&. \fCtrue\fP if running; otherwise, \fCfalse\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Coroutine Manager Pro from the source code\&.
